# -*- coding: utf-8 -*-
"""SpaceshipTitanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n2zPkjbaOlkgUph6t-U_b5n3lBg-OtlK
"""

# Commented out IPython magic to ensure Python compatibility.
# Allows multiple outputs from a single cell:
from IPython.core.interactiveshell import InteractiveShell as IS; IS.ast_node_interactivity = "all"
!pip -q install -U statsmodels > log.txt   # ensures no FutureWarnings from statsmodels

import pandas as pd, numpy as np, statsmodels.api as sm, pprint, math, seaborn as sns, matplotlib.pyplot as plt, sklearn as sk
from scipy import stats as stat

from math import floor
from termcolor import colored

from sklearn.datasets import make_classification
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split as tts
from sklearn.metrics import r2_score, roc_auc_score, roc_curve, auc, confusion_matrix

# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

df_train = pd.read_csv('/content/drive/MyDrive/ColabNotebooks/Data/train.csv')
df_test = pd.read_csv('/content/drive/MyDrive/ColabNotebooks/Data/test.csv')

print(colored(f"\nTrain set info\n", color=  'blue', attrs= ['bold', 'dark']));
display(df_train.info());

print(colored(f"\nTrain set info\n", color=  'blue', attrs= ['bold', 'dark']));
display(df_train.info());

print(colored(f"\nTest set info\n", color=  'blue', attrs= ['bold', 'dark']));
display(df_test.info());

print(colored(f"\nTrain set description\n", color=  'blue', attrs= ['bold', 'dark']));
display(df_train.describe().transpose().style.format('{:,.2f}'));

print(colored(f"\nTest set description\n", color=  'blue', attrs= ['bold', 'dark']));
display(df_test.describe().transpose().style.format('{:,.2f}'));

sns.heatmap(df_train.isnull().T, cbar = False).set_title("Spaceship Titanic - missing values heatmap");

print(colored(f"\nTrain set missing values count\n", color=  'blue', attrs= ['bold', 'dark']))
df_train.isnull().sum()

# create passenger group and number columns from the passenger id
df_train['passgroup'] = df_train['PassengerId'].str.split('_').str[0]
df_train['passno'] = df_train['PassengerId'].str.split('_').str[1]

df_test['passgroup'] = df_test['PassengerId'].str.split('_').str[0]
df_test['passno'] = df_test['PassengerId'].str.split('_').str[1]

# create a sum spending column
sum_num_train = df_train[['RoomService','FoodCourt','ShoppingMall','Spa','VRDeck']]
df_train['sumspent'] = sum_num_train.sum(axis=1,numeric_only=True)

sum_num_test = df_test[['RoomService','FoodCourt','ShoppingMall','Spa','VRDeck']]
df_test['sumspent'] = sum_num_test.sum(axis=1,numeric_only=True)

df_train.head(5)

df_train.iloc[:, 14]

group_spend = df_train.groupby('passgroup')['sumspent'].sum()

df_train.set_index('passgroup', inplace=True)

df_train.reset_index(inplace=True)

df_spent = pd.DataFrame(group_spend)

df_spent.reset_index(inplace=True)

df_spent

df_train = df_train.join(df_spent.set_index('passgroup'), on='passgroup', how='left')

df_train

# calculating an average age amount
avg_age = df_train.mean(numeric_only=True)
avg_age = avg_age['Age']

# Analyzing numerical feature distributions:-
Num_Ftre_Lst = list(df_train.select_dtypes(include= np.number).columns);

fig, ax = plt.subplots(3,2, figsize=(20,14));
for i, col in enumerate(Num_Ftre_Lst):
    sns.histplot(x=df_train[col], bins=50, kde= True, color = 'tab:blue', ax=ax[floor(i/2), i%2]);
    ax[floor(i/2), i%2].grid(visible= True, color= 'lightgrey', linestyle= '--', which= 'both');
plt.suptitle(f"Numerical feature distributions", color= 'tab:blue', fontsize=12);
plt.show();

# checking that it created the new passenger and passenger group columns
df_train.head(3).T

# converting passgroup and passno to integer
df_train['passgroup'] = df_train['passgroup'].astype('int64')
df_train['passno'] = df_train['passno'].astype('int64')
df_test['passgroup'] = df_train['passgroup'].astype('int64')
df_test['passno'] = df_train['passno'].astype('int64')

# Analyzing the correlation between the training features and the target:-
fig, ax = plt.subplots(1,1,figsize= (14,8));
sns.heatmap(data=df_train.corr(), cmap = 'Spectral_r', ax=ax,linecolor= 'black', center=True,
            linewidth = 1.0, annot= True, fmt= '.2%');
ax.set_title(f"Correlation heatmap for Spaceship Titanic train data\n", color = 'black', fontsize= 12);
plt.yticks(rotation= 45, fontsize= 8);
plt.xticks(rotation= 45, fontsize= 8);
plt.show();

# create age categories
df_train['agecat'] = np.where(df_train['Age'] < 18,'Youth','Adult')
df_test['agecat'] = np.where(df_test['Age'] < 18,'Youth','Adult')

# creating dataframe copies
df0_train = df_train.copy()
df0_test = df_test.copy()

# filling cryosleep missing values
df0_train.loc[(df0_train['CryoSleep'].isnull()) & ((df0_train['RoomService'] > 0) | (df0_train['FoodCourt'] > 0) | (df0_train['ShoppingMall'] > 0) | (df0_train['Spa'] > 0) | (df0_train['VRDeck'] > 0))] = np.where(df0_train.loc[(df0_train['CryoSleep'].isnull()) & ((df0_train['RoomService'] > 0) | (df0_train['FoodCourt'] > 0) | (df0_train['ShoppingMall'] > 0) | (df0_train['Spa'] > 0) | (df0_train['VRDeck'] > 0))],'True','False')
df0_test.loc[(df0_test['CryoSleep'].isnull()) & ((df0_test['RoomService'] > 0) | (df0_test['FoodCourt'] > 0) | (df0_test['ShoppingMall'] > 0) | (df0_test['Spa'] > 0) | (df0_test['VRDeck'] > 0))] = np.where(df0_test.loc[(df0_test['CryoSleep'].isnull()) & ((df0_test['RoomService'] > 0) | (df0_test['FoodCourt'] > 0) | (df0_test['ShoppingMall'] > 0) | (df0_test['Spa'] > 0) | (df0_test['VRDeck'] > 0))],'True','False')
df0_train.loc[(df0_train['CryoSleep'].isnull())] = df0_train.loc[(df0_train['CryoSleep'].isnull())].fillna('True')
df0_test.loc[(df0_test['CryoSleep'].isnull())] = df0_test.loc[(df0_test['CryoSleep'].isnull())].fillna('True')

# create dummy variables for binary options
from pandas.core.reshape.reshape import get_dummies
df0_train = pd.get_dummies(data=df_train,columns=['CryoSleep','VIP', 'agecat'],drop_first=True)
df0_test = pd.get_dummies(data=df_test,columns=['CryoSleep','VIP', 'agecat'],drop_first=True)

# filling age missing values
df0_train.loc[(df0_train.Age.isnull())] = df0_train.loc[(df0_train.Age.isnull())].fillna(avg_age)
df0_test.loc[(df0_test.Age.isnull())] = df0_test.loc[(df0_test.Age.isnull())].fillna(avg_age)

# converting data types
df0_train['Age'] = df0_train['Age'].astype('int64')
df0_test['Age'] = df0_test['Age'].astype('int64')

df0_train = df0_train.drop(columns=['HomePlanet','Cabin','Destination','Name','RoomService','FoodCourt','ShoppingMall','Spa','VRDeck','PassengerId'], axis=1)
df0_test = df0_test.drop(columns=['HomePlanet','Cabin','Destination','Name','RoomService','FoodCourt','ShoppingMall','Spa','VRDeck','PassengerId'], axis =1)

# converting Transported to binary
df0_train['Transported'] = np.where(df0_train['Transported'] == True,1,0);

df0_train.isnull().sum()

# checking missing values once more to ensure none
sns.heatmap(df0_train.isnull().T, cbar = False).set_title("Missing values heatmap");

"""Model 0 Baseline - Linear Regression"""

tX, vX, tY, vY = tts(df0_train.drop(['Transported'],axis=1), df0_train['Transported'], test_size=0.2,random_state=0)

m0_0 = sm.OLS(tY,tX).fit()
print(m0_0.summary(title='Spaceship Titanic Baseline OLS Model Summary',alpha=0.01))

pY = m0_0.predict(vX)
r2_score(vY,pY)

"""### Model 0 - Baseline - Logistic Regression"""

# building a train/test set
tX, vX, tY, vY = tts(df0_train.drop(['Transported'],axis=1), df0_train['Transported'], test_size=0.2,random_state=0)

# building a baseline model
md1_0 = sm.Logit(tY, tX).fit()

# printing model summary
print(md1_0.summary(title='Space Titantic Log Regression Baseline Model Summary',alpha=0.05))

pY_prob = md1_0.predict(vX)
pY_prob = pY_prob
pY = (pY_prob > 0.5) * 1
AUC = roc_auc_score(vY, pY_prob)

dfCM = pd.DataFrame(confusion_matrix(vY, pY), index=['True+','True-'], columns=['Pred+','Pred-'])
print(f'Confusion matrix:\n{dfCM}')
print(f'Out of sample accuracy: {np.mean(pY == vY):.2f} and AUC:{AUC:.2f}')

fpr, tpr, thresholds = roc_curve(vY, pY_prob)

plt.rcParams['figure.figsize'] = [5, 5]
ax = pd.DataFrame([fpr, tpr], index=['fpr','tpr']).T.plot(
    'fpr','tpr', kind='line', grid=True, title='Receiver Operating Characteristic', label=f'ROC curve. AUC = {AUC:.2f}');

ax.plot([0, 1], [0, 1], 'r--');  # random predictions curve
ax.set_ylabel('True Positive Rate or (Sensitivity)');
ax.set_xlabel('False Positive Rate or (1 - Specifity)');

df0_train.apply(lambda x: x.value_counts().nunique())

pd.Series(list(map(set,df0_train.values.T)),index=df0_train.columns)

df0_train.CryoSleep_True.value_counts()

df0_train.VIP_True.value_counts()

df0_train.Transported.value_counts()

"""### Model 1 - Improvement"""

# improve the model by scaling the values

#create new dataframe
df1_train = df0_train
data_scaled = StandardScaler(with_mean=True, with_std=True).fit_transform(df1_train)
df1_scaled = pd.DataFrame(data_scaled, columns=df1_train.columns + "_" + "Scl")
df1_train = df1_train.join(df1_scaled)
df1_train = df1_train.drop(columns = ['Age','passgroup','passno','sumspent', 'Transported_Scl','CryoSleep_True_Scl','agecat_Youth_Scl', 'VIP_True_Scl'], axis = 1)

#X, y = make_classification(random_state=0)
tX, vX, tY, vY = tts(df1_train.drop(['Transported'],axis=1), df1_train['Transported'], test_size=0.1,random_state=0)

md1 = sm.OLS(tY,tX).fit()
print(md1.summary(title='Spaceship Titanic Model 1 OLS Model Summary',alpha=0.01))

"""### Model 1 - Logistic Regression"""

# building a train/test set
tX, vX, tY, vY = tts(df1_train.drop(['Transported'],axis=1), df1_train['Transported'], test_size=0.2,random_state=0)

# building a baseline model
md1_1 = sm.Logit(tY, tX).fit()

# printing model summary
print(md1_1.summary(title='Space Titantic Log Regression 1 Model Summary',alpha=0.05))

# produce the probablity of likelihood of the response variable
pY_prob = md1_1.predict(vX)
pY = pY_prob.map(lambda x: 'transport' if x > 0.50 else 'notransport');

pY_prob = md1_1.predict(vX)
pY_prob = pY_prob
pY = (pY_prob > 0.5) * 1
AUC = roc_auc_score(vY, pY_prob)

dfCM = pd.DataFrame(confusion_matrix(vY, pY), index=['True+','True-'], columns=['Pred+','Pred-'])
print(f'Confusion matrix:\n{dfCM}')
print(f'Out of sample accuracy: {np.mean(pY == vY):.2f} and AUC:{AUC:.2f}')

fpr, tpr, thresholds = roc_curve(vY, pY_prob)

plt.rcParams['figure.figsize'] = [5, 5]
ax = pd.DataFrame([fpr, tpr], index=['fpr','tpr']).T.plot(
    'fpr','tpr', kind='line', grid=True, title='Receiver Operating Characteristic', label=f'ROC curve. AUC = {AUC:.2f}');

ax.plot([0, 1], [0, 1], 'r--');  # random predictions curve
ax.set_ylabel('True Positive Rate or (Sensitivity)');
ax.set_xlabel('False Positive Rate or (1 - Specifity)');

df1_train.describe()

from statsmodels.api import add_constant

df2_train = df1_train.copy()
df2_train = sm.add_constant(df2_train)
df2_train = df2_train.drop(columns = ['passno_Scl'])
tX, vX, tY, vY = tts(df2_train.drop(['Transported'],axis=1), df2_train['Transported'], test_size=0.2,random_state=0)

md2_1 = sm.OLS(tY,tX).fit()
print(md2_1.summary(title='Spaceship Titanic Model 2 OLS Model Summary',alpha=0.01))

# building a train/test set
tX, vX, tY, vY = tts(df2_train.drop(['Transported'],axis=1), df2_train['Transported'], test_size=0.2,random_state=0)

# building a baseline model
md2_2 = sm.Logit(tY, tX).fit()

# printing model summary
print(md2_2.summary(title='Space Titantic Log Regression 2 Model Summary',alpha=0.05))

pY_prob = md2_2.predict(vX)
pY_prob = pY_prob
pY = (pY_prob > 0.5) * 1
AUC = roc_auc_score(vY, pY_prob)

dfCM = pd.DataFrame(confusion_matrix(vY, pY), index=['True+','True-'], columns=['Pred+','Pred-'])
print(f'Confusion matrix:\n{dfCM}')
print(f'Out of sample accuracy: {np.mean(pY == vY):.2f} and AUC:{AUC:.2f}')

fpr, tpr, thresholds = roc_curve(vY, pY_prob)

plt.rcParams['figure.figsize'] = [5, 5]
ax = pd.DataFrame([fpr, tpr], index=['fpr','tpr']).T.plot(
    'fpr','tpr', kind='line', grid=True, title='Receiver Operating Characteristic', label=f'ROC curve. AUC = {AUC:.2f}');

ax.plot([0, 1], [0, 1], 'r--');  # random predictions curve
ax.set_ylabel('True Positive Rate or (Sensitivity)');
ax.set_xlabel('False Positive Rate or (1 - Specifity)');

# dropping top insignificant variable to improve model
df3_train = df2_train.copy()
df3_train = df3_train.drop(columns = ['VIP_True'])
# building a train/test set
tX, vX, tY, vY = tts(df3_train.drop(['Transported'],axis=1), df3_train['Transported'], test_size=0.2,random_state=0)

# building a baseline model
md3_2 = sm.Logit(tY, tX).fit()

pY_prob = md3_2.predict(vX)
pY_prob = pY_prob
pY = (pY_prob > 0.5) * 1
AUC = roc_auc_score(vY, pY_prob)

dfCM = pd.DataFrame(confusion_matrix(vY, pY), index=['True+','True-'], columns=['Pred+','Pred-'])
print(f'Confusion matrix:\n{dfCM}')
print(f'Out of sample accuracy: {np.mean(pY == vY):.2f} and AUC:{AUC:.2f}')

fpr, tpr, thresholds = roc_curve(vY, pY_prob)

plt.rcParams['figure.figsize'] = [5, 5]
ax = pd.DataFrame([fpr, tpr], index=['fpr','tpr']).T.plot(
    'fpr','tpr', kind='line', grid=True, title='Receiver Operating Characteristic', label=f'ROC curve. AUC = {AUC:.2f}');

ax.plot([0, 1], [0, 1], 'r--');  # random predictions curve
ax.set_ylabel('True Positive Rate or (Sensitivity)');
ax.set_xlabel('False Positive Rate or (1 - Specifity)');

# dropping remaining insignificant variables to improve model
df4_train = df3_train.copy()
df4_train = df3_train.drop(columns = ['Age_Scl','sumspent_Scl'])
# building a train/test set
tX, vX, tY, vY = tts(df3_train.drop(['Transported'],axis=1), df3_train['Transported'], test_size=0.2,random_state=0)

# building a baseline model
md4_2 = sm.Logit(tY, tX).fit()

pY_prob = md4_2.predict(vX)
pY_prob = pY_prob
pY = (pY_prob > 0.5) * 1
AUC = roc_auc_score(vY, pY_prob)

dfCM = pd.DataFrame(confusion_matrix(vY, pY), index=['True+','True-'], columns=['Pred+','Pred-'])
print(f'Confusion matrix:\n{dfCM}')
print(f'Out of sample accuracy: {np.mean(pY == vY):.2f} and AUC:{AUC:.2f}')

fpr, tpr, thresholds = roc_curve(vY, pY_prob)

plt.rcParams['figure.figsize'] = [5, 5]
ax = pd.DataFrame([fpr, tpr], index=['fpr','tpr']).T.plot(
    'fpr','tpr', kind='line', grid=True, title='Receiver Operating Characteristic', label=f'ROC curve. AUC = {AUC:.2f}');

ax.plot([0, 1], [0, 1], 'r--');  # random predictions curve
ax.set_ylabel('True Positive Rate or (Sensitivity)');
ax.set_xlabel('False Positive Rate or (1 - Specifity)');

tX, vX, tY, vY = tts(df4_train.drop(['Transported'],axis=1), df4_train['Transported'], test_size=0.2,random_state=0)

md4_1 = sm.OLS(tY,tX).fit()
print(md4_1.summary(title='Spaceship Titanic Model 2 OLS Model Summary',alpha=0.01))